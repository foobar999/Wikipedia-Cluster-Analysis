import os, sys
import argparse
from gensim.utils import smart_open, SaveLoad
import pickle, json
import numpy as np


def main():
    parser = argparse.ArgumentParser(description='creates from a given binary pickled object file a text-based file (useful for debugging purposes)', epilog='Example: ./{} gensim corpus.metadata.cpickle corpus.metadata.json'.format(sys.argv[0]))
    parser.add_argument('mode', choices=('gensim','pickle','numpy'), help='file mode: gensim: gensim file generated by .save() -> .save_as_text(); json: python pickled file -> JSON.dump(); numpy: numpy file generated by numpy.save() -> numpy.savetxt()')
    parser.add_argument('pickle', type=argparse.FileType('r'), help='path to input pickled object binary file')
    parser.add_argument('text', type=argparse.FileType('w'), help='path to output JSON object representation file')

    args = parser.parse_args()
    mode = args.mode
    input_pickle_path = args.pickle.name
    output_text_path = args.text.name
    
    if mode == 'gensim':
        obj = SaveLoad.load(input_pickle_path)
        obj.save_as_text(output_text_path)
    else:
        with smart_open(input_pickle_path, "rb") as ifile:
            if mode == 'pickle':
                obj = pickle.load(ifile)
            else:
                obj = np.load(ifile)
        if mode == 'pickle':
            with open(output_text_path, "w") as ofile:
                json.dump(obj, ofile, indent=4)
        else:
            np.savetxt(output_text_path, obj, fmt='%i') 
    
    
    
if __name__ == '__main__':
    main()
    
